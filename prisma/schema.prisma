datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  // imports       = "./zod-utils"
  relationModel = "default"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())

  name         String @unique
  email        String @unique
  passwordHash String
  
  avatarUrl String?

  streetAddress String?
  city          String?
  postCode      String?
  country       String?

  projects Project[] @relation(name: "ProjectToUser")

  invoicesSent     Invoice[] @relation(name: "InvoiceToSender")
  invoicesReceived Invoice[] @relation(name: "InvoiceToPayee")

  payments Payment[] @relation(name: "PaymentToUser")

  @@map("users")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())

  user   User   @relation(name: "ProjectToUser", fields: [userId], references: [id])
  userId String

  projectName        String
  projectDescription String?

  invoices Invoice[] @relation(name: "InvoiceToProject")

  @@map("projects")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
}

// For defintions see https://www.freshbooks.com/hub/payments/invoice-payment-terms
enum PaymentTerms {
  PIA
  CIA
  UPON_RECEIPT
  NET_7
  NET_21
  NET_30
  EOM
  FIFTEEN_MFI
  TWO_TEN_NET_30
  FIFTY_PERCENT_UPFRONT
}

model Invoice {
  id                 String        @id @default(cuid())
  publicId           String
  createdAt          DateTime      @unique @default(now())
  updatedAt          DateTime      @unique @default(now())
  status             InvoiceStatus @default(DRAFT)
  projectName        String
  projectDescription String?
  paymentTerms       PaymentTerms  @default(NET_30)
  payments           Payment[]
  items              Item[]
  payee              User          @relation(name: "InvoiceToPayee", fields: [payeeId], references: [id])
  payeeId            String
  sender             User          @relation(name: "InvoiceToSender", fields: [senderId], references: [id])
  senderId           String

  project   Project? @relation(name: "InvoiceToProject", fields: [projectId], references: [id])
  projectId String?

  @@map("invoices")
}

enum PaymentType {
  STRIPE
  PAYPAL
}

model Payment {
  id         String      @id @default(cuid())
  publicId   String
  type       PaymentType
  invoice    Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  user       User        @relation(name: "PaymentToUser", fields: [userId], references: [id])
  userId     String
  amount     Int
  fee        Int
  currency   String
  success    Boolean
  refunded   Boolean
  data       Json
  externalId String      @unique

  @@map("payments")
}

model Item {
  id        String   @id @default(cuid())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
  name      String
  quantity  Int
  price     Int
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  @@map("items")
}
