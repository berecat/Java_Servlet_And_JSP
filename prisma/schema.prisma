// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @unique @default(now())
  updatedAt     DateTime  @unique @default(now())
  name          String    @unique
  email         String    @unique
  passwordHash  String
  streetAddress String
  city          String
  postCode      String
  country       String
  invoices      Invoice[] @relation(name: "InvoiceToUser")
  clients       Client[]  @relation(name: "ClientToUser")

  @@map("users")
}

model Client {
  id            String    @id @default(cuid())
  createdAt     DateTime  @unique @default(now())
  updatedAt     DateTime  @unique @default(now())
  name          String    @unique
  email         String    @unique
  streetAddress String
  city          String
  postCode      String
  country       String
  users         User[]    @relation(name: "ClientToUser")
  invoices      Invoice[] @relation(name: "InvoiceToClient")
  payments      Payment[] @relation(name: "PaymentToClient")

  @@map("clients")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
}

enum PaymentTerms {
  PIA
  CIA
  UPON_RECEIPT
  NET_7
  NET_21
  NET_30
  EOM
  FIFTEEN_MFI
  TWO_TEN_NET_30
  FIFTY_PERCENT_UPFRONT
}

model Invoice {
  id                 String        @id @default(cuid())
  publicId           String
  createdAt          DateTime      @unique @default(now())
  updatedAt          DateTime      @unique @default(now())
  status             InvoiceStatus
  projectName        String
  projectDescription String?
  paymentTerms       PaymentTerms
  payments           Payment[]
  items              Item[]
  client             Client        @relation(name: "InvoiceToClient", fields: [clientId], references: [id])
  clientId           String
  user               User          @relation(name: "InvoiceToUser", fields: [userId], references: [id])
  userId             String

  @@map("invoices")
}

enum PaymentType {
  STRIPE
  PAYPAL
}

model Payment {
  id         String      @id @default(cuid())
  publicId   String
  type       PaymentType
  invoice    Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  client     Client      @relation(name: "PaymentToClient", fields: [clientId], references: [id])
  clientId   String
  amount     Int
  fee        Int
  currency   String
  success    Boolean
  refunded   Boolean
  data       Json
  externalId String      @unique
}

model Item {
  id        String   @id @default(cuid())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
  name      String
  quantity  Int
  price     Int
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  @@map("items")
}
