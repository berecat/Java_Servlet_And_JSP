datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  // imports       = "./zod-utils"
  relationModel = "default"
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @unique @default(now())
  updatedAt     DateTime  @unique @default(now())
  passwordHash  String
  name          String    @unique
  /// @zod.email()
  email         String    @unique
  avatarUrl     String?
  streetAddress String?
  city          String?
  postCode      String?
  country       String?
  projects      Project[] @relation(name: "ProjectToUser")
  invoices      Invoice[] @relation(name: "InvoiceToUser")

  @@map("users")
}

model Project {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @unique @default(now())
  updatedAt          DateTime  @unique @default(now())
  user               User      @relation(name: "ProjectToUser", fields: [userId], references: [id])
  userId             String
  projectName        String
  projectDescription String?
  invoices           Invoice[] @relation(name: "InvoiceToProject")

  @@map("projects")
}

enum InvoiceStatus {
  PENDING
  PAID
}

// For defintions see https://www.freshbooks.com/hub/payments/invoice-payment-terms
enum PaymentTerms {
  PIA
  CIA
  UPON_RECEIPT
  NET_7
  NET_21
  NET_30
  EOM
  FIFTEEN_MFI
  TWO_TEN_NET_30
  FIFTY_PERCENT_UPFRONT
}

model Invoice {
  id                  Int           @id @default(autoincrement())
  publicId            String        @unique
  createdAt           DateTime      @unique @default(now())
  updatedAt           DateTime      @unique @default(now())
  /// @zod.optional()
  isDraft             Boolean       @default(false)
  /// @zod.optional()
  status              InvoiceStatus @default(PENDING)
  /// @zod.optional()
  paymentTerms        PaymentTerms  @default(NET_30)
  items               Item[]
  user                User          @relation(name: "InvoiceToUser", fields: [userId], references: [id])
  userId              String
  project             Project?      @relation(name: "InvoiceToProject", fields: [projectId], references: [id])
  projectId           String?
  total               Float
  /// @zod.min(1)
  userStreetAddress   String
  /// @zod.min(1)
  userCity            String
  /// @zod.min(1)
  userPostCode        String
  /// @zod.min(1)
  userCountry         String
  /// @zod.email()
  clientEmail         String
  /// @zod.min(1)
  clientName          String
  /// @zod.min(1)
  clientStreetAddress String
  /// @zod.min(1)
  clientCity          String
  /// @zod.min(1)
  clientPostCode      String
  /// @zod.min(1)
  clientCountry       String

  @@map("invoices")
}

model Item {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  /// @zod.min(1)
  name      String
  /// @zod.optional()
  quantity  Int      @default(1)
  price     Float
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int

  @@map("items")
}
